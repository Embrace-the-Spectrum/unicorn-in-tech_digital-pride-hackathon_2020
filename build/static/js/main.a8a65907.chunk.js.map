{"version":3,"sources":["assets/logo.svg","pages/Unknown.js","layout/Header.js","layout/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Unknown","history","useHistory","role","aria-label","className","type","onClick","goBack","Header","to","src","logo","alt","Navigation","App","rel","href","integrity","crossorigin","exact","path","class","component","from","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wHAAAA,EAAOC,QAAU,IAA0B,kC,uOCmB5BC,G,MAbC,WACZ,IAAMC,EAAUC,cAChB,OACI,iCACI,mCACA,+CAAoB,0BAAMC,KAAK,MAAMC,aAAW,eAA5B,iBACpB,4BAAQC,UAAU,iBAAiBC,KAAK,SAASC,QAAS,kBAAMN,EAAQO,WAAxE,c,iBCQGC,G,MAbA,WACX,OACI,gCACI,kBAAC,IAAD,CAAMC,GAAG,KACL,yBAAKC,IAAKC,IAAMP,UAAU,cAAcQ,IAAI,SAC5C,yDCSDC,G,MAfI,WACf,OACI,6BACI,4BACI,kBAAC,IAAD,CAAMJ,GAAG,KACL,qCAEJ,kBAAC,IAAD,CAAMA,GAAG,YACL,4CCwBLK,G,MA7BH,WACR,OACI,kBAAC,IAAD,KACA,0BAAMC,IAAI,aAAaC,KAAK,2EAA2EC,UAAU,0EAA0EC,YAAY,cAC/M,0BAAMF,KAAK,mEAAmED,IAAI,eACtE,yBAAKX,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOe,OAAK,EAACC,KAAK,KACd,6BACI,uCACA,2CAGR,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,YACd,6BACI,4BAAI,4BAAQf,KAAK,SAASgB,MAAM,yBAA5B,YACJ,4BAAI,4BAAQhB,KAAK,SAASgB,MAAM,yBAA5B,eAGZ,kBAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,OAAOE,UAAWvB,IACpC,kBAAC,IAAD,CAAUwB,KAAK,KAAKd,GAAG,cClBvBe,QACU,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACxB,2D,MCXFC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDyHpB,kBAAmBC,WACtBA,UAAUC,cAAcC,MACtBC,MAAK,SAAAC,GACLA,EAAaC,gBAEbC,OAAM,SAAAC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a8a65907.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport './Unknown.css';\n\n\nconst Unknown = () => {\n    const history = useHistory();\n    return (\n        <section>\n            <h2>404</h2>\n            <p>Page not found!  <span role=\"img\" aria-label=\"frown emoji\">üôÅ</span></p>\n            <button className=\"unknown-return\" type=\"button\" onClick={() => history.goBack()}>\n                Go Back\n            </button>\n        </section>\n    )\n}\n\nexport default Unknown;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport logo from '../assets/logo.svg';\nimport './Header.css';\n\n\nconst Header = () => {\n    return (\n        <header>\n            <Link to=\"/\">\n                <img src={logo} className=\"header-logo\" alt=\"logo\"/>\n                <h1>\n                    Pride Through Protest\n                </h1>\n            </Link>\n        </header>\n    )\n}\n\nexport default Header;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './Navigation.css';\n\n\nconst Navigation = () => {\n    return (\n        <nav>\n            <ul>\n                <Link to=\"/\">\n                    <li>Home</li>\n                </Link>\n                <Link to=\"/protest\">\n                    <li>Protest</li>\n                </Link>\n            </ul>\n        </nav>\n    )\n}\n\nexport default Navigation;\n","import React from 'react';\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\n\nimport Unknown from './pages/Unknown';\nimport Header from './layout/Header';\nimport Navigation from './layout/Navigation';\nimport './App.css';\n\n\nconst App = () => {\n    return (\n        <BrowserRouter>\n        <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\" integrity=\"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk\" crossorigin=\"anonymous\"/>\n<link href=\"https://fonts.googleapis.com/css2?family=Montserrat&display=swap\" rel=\"stylesheet\"/>\n            <div className=\"app\">\n                <Header/>\n                <Navigation/>\n                <Switch>\n                    <Route exact path=\"/\">\n                        <div>\n                            <h2>Welcome</h2>\n                            <h3>I am a...</h3>\n                        </div>\n                    </Route>\n                    <Route exact path=\"/protest\">\n                        <div>\n                            <h2><button type=\"button\" class=\"btn btn-outline-light\">SPEAKER</button></h2>\n                            <h4><button type=\"button\" class=\"btn btn-outline-light\">LISTENER</button></h4>\n                        </div>\n                    </Route>\n                    <Route exact path=\"/404\" component={Unknown}/>\n                    <Redirect from=\"/*\" to=\"/404\"/>\n                </Switch>\n            </div>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t// [::1] is the IPv6 localhost address.\n\twindow.location.hostname === '[::1]' ||\n\t// 127.0.0.0/8 are considered localhost for IPv4.\n\twindow.location.hostname.match(\n\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t)\n);\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { 'Service-Worker': 'script' },\n\t})\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t'No internet connection found. App is running in offline mode.'\n\t\t\t);\n\t\t});\n}\n\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then(registration => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App/>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}