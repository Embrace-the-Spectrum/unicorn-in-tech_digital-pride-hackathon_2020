{"ast":null,"code":"// This optional code is used to register a service worker.\n// register() is not called by default.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\nvar isLocalhost=Boolean(window.location.hostname==='localhost'||// [::1] is the IPv6 localhost address.\nwindow.location.hostname==='[::1]'||// 127.0.0.0/8 are considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));function registerValidSW(swUrl,config){navigator.serviceWorker.register(swUrl).then(function(registration){registration.onupdatefound=function(){var installingWorker=registration.installing;if(installingWorker==null){return;}installingWorker.onstatechange=function(){if(installingWorker.state==='installed'){if(navigator.serviceWorker.controller){// At this point, the updated precached content has been fetched,\n// but the previous service worker will still serve the older\n// content until all client tabs are closed.\nconsole.log('New content is available and will be used when all '+'tabs for this page are closed. See https://bit.ly/CRA-PWA.');// Execute callback\nif(config&&config.onUpdate){config.onUpdate(registration);}}else{// At this point, everything has been precached.\n// It's the perfect time to display a\n// \"Content is cached for offline use.\" message.\nconsole.log('Content is cached for offline use.');// Execute callback\nif(config&&config.onSuccess){config.onSuccess(registration);}}}};};}).catch(function(error){console.error('Error during service worker registration:',error);});}function checkValidServiceWorker(swUrl,config){// Check if the service worker can be found. If it can't reload the page.\nfetch(swUrl,{headers:{'Service-Worker':'script'}}).then(function(response){// Ensure service worker exists, and that we really are getting a JS file.\nvar contentType=response.headers.get('content-type');if(response.status===404||contentType!=null&&contentType.indexOf('javascript')===-1){// No service worker found. Probably a different app. Reload the page.\nnavigator.serviceWorker.ready.then(function(registration){registration.unregister().then(function(){window.location.reload();});});}else{// Service worker found. Proceed as normal.\nregisterValidSW(swUrl,config);}}).catch(function(){console.log('No internet connection found. App is running in offline mode.');});}export function register(config){if(process.env.NODE_ENV==='production'&&'serviceWorker'in navigator){// The URL constructor is available in all browsers that support SW.\nvar publicUrl=new URL(process.env.PUBLIC_URL,window.location.href);if(publicUrl.origin!==window.location.origin){// Our service worker won't work if PUBLIC_URL is on a different origin\n// from what our page is served on. This might happen if a CDN is used to\n// serve assets; see https://github.com/facebook/create-react-app/issues/2374\nreturn;}window.addEventListener('load',function(){var swUrl=\"\".concat(process.env.PUBLIC_URL,\"/service-worker.js\");if(isLocalhost){// This is running on localhost. Let's check if a service worker still exists or not.\ncheckValidServiceWorker(swUrl,config);// Add some additional logging to localhost, pointing developers to the\n// service worker/PWA documentation.\nnavigator.serviceWorker.ready.then(function(){console.log('This web app is being served cache-first by a service '+'worker. To learn more, visit https://bit.ly/CRA-PWA');});}else{// Is not localhost. Just register service worker\nregisterValidSW(swUrl,config);}});}}export function unregister(){if('serviceWorker'in navigator){navigator.serviceWorker.ready.then(function(registration){registration.unregister();}).catch(function(error){console.error(error.message);});}}","map":{"version":3,"sources":["/Users/kylegraden/Documents/GitHub/unicorn-in-tech_digital-pride-hackathon_2020/src/serviceWorker.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","checkValidServiceWorker","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","process","env","NODE_ENV","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener","message"],"mappings":"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","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t// [::1] is the IPv6 localhost address.\n\twindow.location.hostname === '[::1]' ||\n\t// 127.0.0.0/8 are considered localhost for IPv4.\n\twindow.location.hostname.match(\n\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t)\n);\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { 'Service-Worker': 'script' },\n\t})\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t'No internet connection found. App is running in offline mode.'\n\t\t\t);\n\t\t});\n}\n\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then(registration => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}